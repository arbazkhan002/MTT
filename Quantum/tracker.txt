Username : postgres 
Password : indian 
Database : demo


1. This makes qgis recognise demo database
psql -U postgres -h localhost demo -c 'CREATE EXTENSION postgis;'

2. Command : psql -U postgres -h localhost demo;

Output : 
Password for user postgres: 
psql (9.1.5)
SSL connection (cipher: DHE-RSA-AES256-SHA, bits: 256)
Type "help" for help.
demo=#

Further commands 
demo=# \dt
              List of relations
 Schema |      Name       | Type  |  Owner   
--------+-----------------+-------+----------
 public | Academic_area   | table | postgres
 public | spatial_ref_sys | table | postgres
(2 rows)


3.  select ST_AsText(the_geom) from "Academic_area"
limit 1;

TO GET THE TEXT REPRESENTATION OF A GEOMETRY

4. Select a layer and click on Layer > Save As . In OGR Creation Options > Layer pit "GEOMETRY=AS_WKT" without quotes.


PGROUTING
tut:http://planet.qgis.org/planet/tag/routing/
installed directory : /usr/share/postlbs/matching.sql

Setting Up:
psql -U postgres -h localhost GIStest -c 'CREATE EXTENSION postgis;'
psql -U postgres -d "GIStest" -h localhost < /usr/share/postlbs/routing_topology.sql
psql -U postgres -d "GIStest" -h localhost < /usr/share/postlbs/routing_core.sql
psql -U postgres -d "GIStest" -h localhost < /usr/share/postlbs/routing_core_wrappers.sql


Installing a plugin:
Just copy paste the downloaded plugin to usr/share/qgis/python/plugins/

psql -U postgres -d "demo" -h localhost < /usr/share/postlbs/routing_topology.sql
psql -U postgres -d "demo" -h localhost < /usr/share/postlbs/routing_core.sql
psql -U postgres -d "demo" -h localhost < /usr/share/postlbs/routing_core_wrappers.sql

CREATE OR REPLACE VIEW road_ext AS
   SELECT *, St_StartPoint(geom), St_EndPoint(geom)
   FROM roads;

CREATE TABLE node AS
   SELECT row_number() OVER (ORDER BY foo.p)::integer AS id,
          foo.p AS the_geom
   FROM (
      SELECT DISTINCT road_ext1.st_startpoint AS p FROM road_ext1
      UNION
      SELECT DISTINCT road_ext1.st_endpoint AS p FROM road_ext1
   ) foo
   GROUP BY foo.p;

CREATE TABLE network AS
   SELECT a.*, b.id as start_id, c.id as end_id
   FROM road_ext1 AS a
      JOIN node1 AS b ON a.st_startpoint = b.the_geom
      JOIN node1 AS c ON a.st_endpoint = c.the_geom;

SELECT *
   FROM network1
   JOIN
   (SELECT * FROM shortest_path('
      SELECT gid AS id,
          start_id::int4 AS source,
          end_id::int4 AS target,
          length::float8 AS cost
      FROM network1',
      1,
      4,
      false,
      false)) AS route
   ON
   network1.gid = route.edge_id
   
Useful command to split multilines : select st_asewkt(q.p) from (select (st_dump(geom)).geom as p from road_ext where shape_leng>1000) as q ;   
   2. select gid, type_id,type_road,st_length((st_dump(geom)).geom),name, (st_dump(geom)).geom as geom from roads where st_numgeometries(geom)>4; -- *****used*****

================================================================================================================================================

RESTART :

-----------------------------------------------------------------
1 . break each multiline into a set of linestrings
-----------------------------------------------------------------
CREATE OR REPLACE VIEW road_ext AS
   SELECT *, St_StartPoint(foo.geom), St_EndPoint(foo.geom)
   FROM ( SELECT gid, type_id, type_road,
st_length((st_dump(geom)).geom) as length,
name,
 (st_dump(geom)).geom as geom 
from roads ) foo ;

--------------------------------------------------------------

TO make it work, Break each linestring into small linesegments. 
See how network1 works with shortest path query of 1 to 4.


-----------------------------------------------------------
2. To get intersections -  
-----------------------------------------------------------
select st_astext((st_dump(st_split(st_collect(a.the_geom,b.the_geom),ST_Intersection(a.the_geom,b.the_geom)))).geom) from (select * from network1 where gid=1) as a, (select * from network1 where gid=2) as b;
                 st_astext                 
----------------- output --------------------------
 LINESTRING(424127 2931999,423797 2931999)
 LINESTRING(424127 2932108,424127 2931999)

-----------------------------------------------------------

\\\\\\\\\\\\\\ BETTER WAY http://gis.stackexchange.com/questions/34687/how-to-split-osm-roads-into-individual-segments-at-intersections

\\ Since all lines are multistrings, get linestrings from them
create table dumped_roads as select gid,type_id,type_road,name,(st_dump(a.geom)).geom from roads as a;

\\ Cut the self intersecting lines
create table noded_roads as select gid, type_id,type_road,name,(st_dump(st_node(geom))).geom as geom from dumped_roads;

\\ Get intersection points
create table split_points as select DISTINCT a.gid as g1,b.gid as g2, (st_dump(
st_intersection(a.geom,b.geom)
) 
).geom as geom 
from noded_roads as a, noded_roads as b where st_intersects(a.geom,b.geom)=TRUE and a.gid!=b.gid;

\\ Split each line on the above intersection points
run select splitter();


create table split_roads as select row_number() over (order by geom) as split_id,* from dummy;

\\ Get start and end points
CREATE OR REPLACE VIEW road_ext AS
   SELECT *, St_StartPoint(geom), St_EndPoint(geom)
   FROM split_roads;


\\ Assign ids to the nodes
CREATE TABLE node AS
   SELECT row_number() OVER (ORDER BY foo.p)::integer AS id,
          foo.p AS the_geom
   FROM (
      SELECT DISTINCT road_ext.st_startpoint AS p FROM road_ext
      UNION
      SELECT DISTINCT road_ext.st_endpoint AS p FROM road_ext
   ) foo
   GROUP BY foo.p;

\\ Create a routable network
CREATE TABLE network AS
   SELECT st_length(a.geom) as length, a.*, b.id as start_id, c.id as end_id
   FROM road_ext AS a
      JOIN node AS b ON a.st_startpoint = b.the_geom
      JOIN node AS c ON a.st_endpoint = c.the_geom;

\\ Get the shortest path (See properties for layer 260-->261 in qgis)
SELECT *
   FROM network
   JOIN
   (SELECT * FROM shortest_path('
      SELECT split_id AS id,
          start_id::int4 AS source,
          end_id::int4 AS target,
          length::float8 AS cost
      FROM network',
      261,
      260,
      false,
      false)) AS route
   ON
   network.split_id = route.edge_id
   
Exact layer 260-->261: SELECT * FROM network JOIN (SELECT * FROM shortest_path(' SELECT split_id AS id, start_id::int4 AS source, end_id::int4 AS target, length::float8 AS cost FROM network', 260, 261, false, false)) AS route ON network.split_id = route.edge_id 



SELECT     
    g.gid, g.type_id, g.type_road, ST_GeomFromEWKB((ST_Dump(ST_Split(g.geom, blade.geom))).geom) As geom,
    generate_series(1,ST_NumGeometries((ST_Split(g.geom, blade.geom)))) as id
FROM    
    split_points2 as blade,
    dumped_roads as g
WHERE
    ST_Intersects(g.geom, blade.geom)






----------------------------------------------------------------------------------------------------------------------
1. To directly get the collection of points from intersections of all the multilinestrings:
----------------------------------------------------------------------------------------------------------------------

select a.gid, st_astext(
	st_intersection(a.geom,b.geom)
					) 
	from roads as a, roads as b where st_intersects(a.geom,b.geom)=TRUE and a.gid!=b.gid;

	==================================================
	Some points above are multipoints, so break them :
	==================================================	
		select a.gid,
		DISTINCT (st_dump(
			st_intersection(a.geom,b.geom)
				) 
		) as geom
							) 
		from roads as a, roads as b where st_intersects(a.geom,b.geom)=TRUE and a.gid!=b.gid;

----------------------------------------------------------------------------------------------------------------------
select st_astext(pointsn((st_dump(geom)).geom, generate_series(1, st_npoints((st_dump(geom)).geom))) from roads where gid=1;



MY FUNCTION FINALLY!!!
run select splitter();
CREATE TABLE dumped_roads_renderer as select row_number() OVER (order by foo.p) as id, foo.gid, foo.type_road, foo.p as geom from
(select distinct gid,type_id,type_road,name,geom as p from dummy) foo;


Currently it intersect recognise some of the split points.(Check that whether split points on a line are recognised)
 
 We need to line_locate_point which are under certain tolerance so that a point on the line near to the intersection point
can be located and line can be split from there.



NOISE CORRECTION
create table noded_roads_updated as select * from noiseCorrect();
drop table noded_roads;
create table noded_roads as select * from noded_roads_updated;


=======
Why????
========
----------------------------------------------------------------------------------------------------------------------
PROCEEDING THE SAME WAY AS MENTIONED IN STEPS ABOVE DOESNT GIVE PG ROUTING ENGINE RESULTS
BUT NETWORK_BACKUP GIVES THE RESULTS
All X_BACKUP are correct and working!!
----------------------------------------------------------------------------------------------------------------------S

Towards Discourse

-----------------------------------------------------------------------------------------
To Compile : psql -U postgres -d "demo" -h localhost < /home/MTT/Quantum/discourse.sql
To run : select discourse();
-----------------------------------------------------------------------------------------

1. Store angle information for starting line segment and ending line segment for all linestrings
create table network_extended as select degrees(st_azimuth(st_startpoint(geom),st_pointN(geom,2))) as start_angle, degrees(st_azimuth(st_pointN(geom,st_Npoints(geom)-1),st_endpoint(geom))) as end_angle,  * from network;

2. Add columns for connection information
alter table network_extended add column start_connections bool;
alter table network_extended add column end_connections bool;

3. Set default values
update network_extended set  start_connections=false;
update network_extended set  end_connections=false;

4.. Store connections information whether there exists more than one connection at any start_id or end_id
update network_extended set end_connections=true where end_id = ANY (
	select records.id from (
		select y.id as id,(select count(*) from network where start_id=y.id or end_id=y.id) as connections from -- count the number of connections with any id
			(
				select generate_series(1,z.count) as id from (select count(*) as count from node) as z		-- Create a series of all node ids
			) 
		as y
	) as records where records.connections>2		-- 2 connections can occur for any node (one as start_id, second as end_id)
);

ORIGINAL:update network_extended set end_connections=true where end_id = ANY (select records.id from (select y.id as id,(select count(*) from network where start_id=y.id or end_id=y.id) 
as connections from (select generate_series(1,z.count) as id from (select count(*) as count from node) as z) as y) as records where records.connections>1);

5. Decision points addition
update network_extended set start_connections_no=1 where start_id = ANY (select records.id from (select y.id as id,(select count(*) from network where start_id=y.id or end_id=y.id) 
as connections from (select generate_series(1,z.count) as id from (select count(*) as count from node) as z) as y) as records where records.connections>2);

update network_extended set end_connections_no=1 where end_id = ANY (select records.id from (select y.id as id,(select count(*) from network where start_id=y.id or end_id=y.id) 
as connections from (select generate_series(1,z.count) as id from (select count(*) as count from node) as z) as y) as records where records.connections>2);

update network_extended set decisionpoints = start_connections_no+end_connections_no

***dropped columns start_connections_no, end_connections_no***

6. Dumping network extended to database demo
pg_dump -U postgres -h localhost -t network_extended GIStest | psql -U postgres -h localhost demo

7. Updating the map
Pick up the polygons from Front IITK Map 
http://www.youtube.com/watch?v=A3EfxDMNMpk

/******************************************
NOW LOGGING DONE in /var/log/postgresql;
******************************************/

8. MAP ANNOTATION
psql -U postgres -h localhost demo < annotatedmap.sql

Note: When SRIDs are different, UPDATE TABLE x SET geom=st_SetSRID(geom);


/******************************************
TIP: 
To iterate over the tables of a database
select table_name from information_schema.tables where table_type='BASE TABLE' and table_schema='public'

To iterate over the columns of a table
select column_name from information_schema.columns where table_name='parks';
******************************************/

Added to google_api : wikimapia.py and buildPOI.py


/-------------------------------------------------------------------------------
Towards Salience of Landmarks
-------------------------------------------------------------------------------/
create table salience_helper (gid integer, category character varying(100), name character varying(100), geom geometry, wiki integer);

now run salience_helper.sql

update fence set geom=st_setSRID(geom,32644);  (fences_qgis created with srid 0 as only then qgis GUI works for fences layer, strange!!)

NOTE : GOOGLE RADAR SEARCH discarded, picking only the first 60 results of nearby search ranked by prominence in a circle of radius 2 km centered at PK library.


Created a table salience using SQL queries in (salience_helper.sql)

Removed the edgetx tables from the project (Dont need it anymore, salience is enough)
Instead, created a table edgelandmark which stores pair of edge and corresponding salient landmark

NEXT TARGET : Since the decoder is appropriately following the encoder i.e the language using SLSR.. type symbols is totally non-ambiguous and perfectly decoded.
We need to move to higher quality of route descriptions involving landmarks being abstract as much as possible 

Challenge: Each Edge has a number of landmarks based on the distance metric. We need to know what landmarks would be encountered first and what sequence would be followed.

Idea : Store the closest point on the edge with a particular landmark it has been marked with. (Not feasible)
Advantages: It helps to track early whether the user disoriented.

Progress: Created a table network_dumppoints with all edges split into sections. Now replace network_extended in annotatedmap.sql with network_dumppoints. 


(Deferred)

Usage:
At each step, give out the code word (like S)
For asking questions on where he is on this edge, use the salient sections on this edge as references.
So compute for each edge, a series of landmarks appearing en-route and the distances of this section from the starting point.
The dump_ids are arranged in order of their linkage.
Use edgelandmark of dumppoints to find lanmark for each of these sections

CHALLENGE: How about landmarks on a U-turn road? First section may be equidistant with last section on a landmark!!!! 


Suppose SxSL is the discourse where x is a landmark corresponding to the edge of second S, then instruction should be take second left from x. 
This is enough for the communication protocol.

Now focus on the estimation


(NOTE: Some landmarks might not be visible to the client so after building edgelandmarks table,
 one needs to invalidate those landmarks which are not in the line of sight)


Discourse TIPS:
Give a hint of what would be seen in the next edge
Example: Take a left at the park, in the way ahead you would see a red building on the right. Say yes when you see it.
(After the estimated time to reach there passes out, pose the question - Did you see a red building on right?)
When the user says yes, record the time of saying yes against this landmark and using the time recorded at the previous landmark, compute the average speed.
Q. Calculating the estimated time to reach there?
A. Get the centroid of the landmark geometry
-- Find the point x on the line closest to it using (st_line_interpolate(g1, st_line_locate_point(g1,g2)))
-- Calculate the distance of x from u and store it.

SPeed distribution
Speed (S) - (random.lognormvariate(math.log(20),0.5)) 
Why this parameters? 30 is speed limit on the roads, speed limits are set to 85th percentile of operating speeds. 
(Use p-quantile calculator - http://www.solvemymath.com/online_math_calculator/statistics/continuous_distributions/lognormal/quantile_lognormal.php)
Deviance (D)- Gaussian distribution random.gauss(0,(S/10))

Steps:
1. Pick up a speed using the lognorm distribution.
2. Find the percentile value (p-quantile) of this speed.
3. At each road segment find the speed corresponding to p and assign it to the driver.


For wayfinding algorithm

Predicting user familiarity:
- Based on predicting user preferences. Idea : Use a recommender system
- Factorization machines work well with sparse data (What do you know? Grockit test data)

Cluster landmarks:
To identify the behaviour of a particular user towards understanding landmark information.


//----------------------------------------------------------------------------------------
CODE FAMILIARITY

Case#1
Did you see 3230?
No 
(Even though 3230 in visited)

Because the question was probably on the different direction (different dumpId)

Case#2
Speed less than 5 in some occassions
Do u see X?
No
Tracker waits for some time to let runner see X.. that time causes decrease in speed


--------------------------------------------------------------------------------------------------------
Adding intrinsic landmarks:

Create a table nodeLandmarks (See nodeLandmarks.sql)
add all intersections to salience with id=-1
reset all ids of the table salience with the code given in nodeLandmarks.sql  (starts with "with" command)
now recreate sectlandmarks (as ids have changed)
add all intrinsic landmarks in sectlandmarks (0.01 is the required distance)

---------------------------------------------------------------------------------------------------------
On the pattern on prompts:

1. First ask for a reply whenever you reach the next checkpoint and set a timer for the reply according to the expected time
2. If the timer fires and no reply is made, ask it explicitly (did you see section x)
3 a) If the answer is yes, move to prompt for next checkpoint
3 b) Else, ask questions on all possible checkpoints reachable from the last visited checkpoint by considering the time passed
	since the last reply was recorded.
4. If the user says yes to any of the question, mark it as the now source and convey new path to the destination.	
5. If all questions are negatively answered, client hasnt yet crossed the expected checkpoint. Wait for the client and go to step 1
	but reduce the timer firing time by some factor.

---------------------------------------------------------------------------------------------------------
Collecting results (avoiding large programs)	
	for i in {1..10}; do timeout 500 python main.py; done

Synthetic data set
for i in {1..10}; do for j in {1..50}; do echo $i | timeout 50 python main.py; done done

---------------------------------------------------------------------------------------------------------
Improvements:
On a negative reply, first ask if you crossed the intersection, and then put on all the questions.



---------------------------------------------------------------------------------------------------------
Restricted Memory Model:
Only those sections which are on the same sectId are remembered
For CI based questions, special response handling:
1. CI questions are replied from self.visited
2. CI questions begin with "CI"

Server Strategies:
Filter those questions from nextpath which are 
1. on a U-turn,
2. for each splitId, exactly one question
3. only those edges which are in the range [x/ERRORFACTOR,x*ERRORFACTOR] are asked,
	where x=(self.time-checkpttime)*speed
   <if yet can't localize, reactive phase>
4. Wait indefinitely till nextpath is non-zero.   
5. If 'No' received on the next segment, wait for time enough so that next longest segment in nextpath is travelled
